#!/bin/sh

# TODO how does the link printing order affects the compensation tool?

declare -a function_symbols #[id]
declare -a send_mark_ct #[tid]
declare -a wait_mark_ct #[tid]
declare -A send_mark #[tid,index]
declare -A wait_mark #[tid,index]
declare -a tid_symbols #[tid]
# TODO necessary?
resolution=0
declare -A stack #[tid,index]
declare -a tid_indexes #[tid]

declare -a link_mark #[matching_tid]
declare -A link_stack #[send_rank,send_mark]

otfdump $1 | grep -v 'Counter:' | perl -pe 's/[ \t]+/ / ; s/,//g' | while read line
do
  tokens=( $line )
  timestamp_nonadjusted=${tokens[1]}
  case "$timestamp_nonadjusted" in
    "DefTimerResolution:" )
      resolution=${tokens[-1]}
      continue
      ;;
    "DefFunction:" )
      #${function_symbols[${tokens[5]}]}=${tokens[7]}
      function_symbols[${tokens[5]}]="$(echo $line | grep -shoPe '".+"')"
      continue
      ;;
    "DefProcess:" )
      tid_symbols[${tokens[5]}]="$(echo $line | grep -shoPe '".+"')"
      continue
      ;;
  esac
  timestamp_adjusted=$(echo "$timestamp_nonadjusted / $resolution" | bc -l 2>/dev/null)
  if test -z $timestamp_adjusted
  then
    #echo "=$line="
    continue
  fi
  event_type=${tokens[2]}
  case $event_type in
    "Enter:" | "Leave:" )
      event_id=${tokens[4]}
      event_tid=${tokens[6]}
      if test "$event_type" = "Enter:"
      then
        if test -z ${tid_indexes[$event_tid]}
        then
          tid_indexes[$event_tid]=0
        fi
        # TODO improve this control flow
        if echo ${function_symbols[$event_id]} | grep -qi send
        then
          if test -z ${send_mark_ct[$event_tid]}
          then
            send_mark_ct[$event_tid]=0
          else
            send_mark_ct[$event_tid]=$((${send_mark_ct[$event_tid]} + 1))
          fi
          send_mark[$event_tid,$event_id]=${send_mark_ct[$event_tid]}
        else
          if echo ${function_symbols[$event_id]} | grep -qi wait
          then
            if test -z ${wait_mark_ct[$event_tid]}
            then
              wait_mark_ct[$event_tid]=0
            else
              wait_mark_ct[$event_tid]=$((${wait_mark_ct[$event_tid]} + 1))
            fi
          wait_mark[$event_tid,$event_id]=${wait_mark_ct[$event_tid]}
          fi
        fi
        stack[$event_tid,${tid_indexes[$event_tid]}]=$timestamp_adjusted
        tid_indexes[$event_tid]=$((${tid_indexes[$event_tid]} + 1))
      else # Leave
        if test -z ${tid_indexes[$event_tid]} || test ${tid_indexes[$event_tid]} -le 0
        then
          echo "Tried to pop a state from an empty stack at tid($event_id) line($line)"
          exit
        fi
        tid_indexes[$event_tid]=$((${tid_indexes[$event_tid]} - 1))
        enter_=${stack[$event_tid,${tid_indexes[$event_tid]}]}
        exit_=$timestamp_adjusted
        # TODO function
        duration=$(echo "$exit_ - $enter_" | bc -l 2>/dev/null)
        if test -z $duration
        then
          echo "Failed state duration. Enter($enter_) Exit($exit_) at tid($event_tid) index(${tid_indexes[$event_tid]}) line($line)"
          exit
        fi
        # FIXME
        imbrication=0
        # TODO improve control flow
        if ! test -z ${send_mark[$event_tid,$event_id]}
        then
          echo "State, ${tid_symbols[$event_tid]}, STATE, $enter_, $exit_, $duration, $imbrication, ${function_symbols[$event_id]}, ${send_mark[$event_tid,$event_id]}"
        else
          if ! test -z ${wait_mark[$event_tid,$event_id]}
          then
            echo "State, ${tid_symbols[$event_tid]}, STATE, $enter_, $exit_, $duration, $imbrication, ${function_symbols[$event_id]}, ${wait_mark[$event_tid,$event_id]}"
          else
            echo "State, ${tid_symbols[$event_tid]}, STATE, $enter_, $exit_, $duration, $imbrication, ${function_symbols[$event_id]}"
          fi
        fi
      fi
      ;;
    "SendMessage:" | "ReceiveMessage:" )
      event_tid=${tokens[4]}
      matching_tid=${tokens[6]}
      # event_group=${tokens[8]}
      # event_type=${tokens[10]}
      msg_size=${tokens[12]}
      if test "$event_type" = "SendMessage:"
      then
        link_stack[$event_tid,${send_mark_ct[$event_tid]}]=$timestamp_adjusted
      else # Recv
        if test -z ${link_mark[$matching_tid]}
        then
          link_mark[$matching_tid]=0
        else
          link_mark[$matching_tid]=$((${link_mark[$matching_tid]} + 1))
        fi
        enter_=${link_stack[$matching_tid,${link_mark[$matching_tid]}]}
        exit_=$timestamp_adjusted
        duration=$(echo "$exit_ - $enter_" | bc -l 2>/dev/null)
        if test -z $duration
        then
          echo "Failed link duration. Enter($enter_) Exit($exit_) at tid($event_tid) matching($matching_tid) index(${link_mark[$matching_tid]}) link stack(${!link_stack[@]}) line($line)"
          exit
        fi
        echo "Link, root, LINK, $enter_, $exit_, $duration, PTP, ${tid_symbols[$matching_tid]}, ${tid_symbols[$event_tid]}, ${link_mark[$matching_tid]}, $msg_size"
      fi
      ;;
  esac
done
